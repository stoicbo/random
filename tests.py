SERVICETESTCALLS = {
    "accessanalyzer": lambda client: client.list_analyzers(type="ACCOUNT"),
    "account": lambda client: client.get_access_skyline(),  # Requires no arguments
    "acm": lambda client: client.list_certificates(),
    "acm-pca": lambda client: client.list_certificate_authorities(MaxResults=1),
    "alexaforbusiness": lambda client: client.list_profiles(),
    "amp": lambda client: client.list_workspaces(),
    "amplify": lambda client: client.list_apps(),
    "amplifybackend": lambda client: client.list_backends(),
    "amplifyuibuilder": lambda client: client.list_components(appId="a", environmentName="e"), # Requires placeholders, but minimal
    "apigateway": lambda client: client.get_rest_apis(),
    "apigatewaymanagementapi": lambda client: client.get_websocket_connection(ConnectionId="a"), # Requires a connection ID
    "apigatewayv2": lambda client: client.get_apis(),
    "appconfig": lambda client: client.list_applications(),
    "appconfigdata": lambda client: client.get_latest_configuration(ApplicationIdentifier="a", ConfigurationProfileIdentifier="c", ClientId="id"), # Requires placeholders
    "appflow": lambda client: client.list_flows(),
    "appintegrations": lambda client: client.list_event_integration_associations(),
    "application-autoscaling": lambda client: client.describe_scalable_targets(),
    "application-insights": lambda client: client.list_applications(),
    "appmesh": lambda client: client.list_meshes(),
    "apprunner": lambda client: client.list_services(),
    "appstream": lambda client: client.describe_fleets(),
    "appsync": lambda client: client.list_graphql_apis(),
    "arc-zonal-shift": lambda client: client.list_zonal_shifts(),
    "athena": lambda client: client.list_work_groups(),
    "auditmanager": lambda client: client.list_assessments(),
    "autoscaling": lambda client: client.describe_auto_scaling_groups(MaxRecords=1),
    "autoscaling-plans": lambda client: client.describe_scaling_plans(),
    "avenue": lambda client: client.list_workload_statuses(),
    "awsconnector": lambda client: client.list_connectors(),
    "backup": lambda client: client.list_backup_jobs(MaxResults=1),
    "backup-gateway": lambda client: client.list_gateways(),
    "backupstorage": lambda client: client.list_objects(),
    "batch": lambda client: client.describe_job_queues(),
    "bcm-data-exports": lambda client: client.list_exports(),
    "bedrock": lambda client: client.list_foundation_models(),
    "bedrock-agent": lambda client: client.list_agents(),
    "bedrock-agent-runtime": lambda client: client.retrieve(agentId="a", knowledgeBaseId="k", retrievalQuery={"text": "t"}), # Requires placeholders
    "bedrock-runtime": lambda client: client.invoke_model(modelId="a", body=b"{}", contentType="c"), # Requires placeholders
    "billingconductor": lambda client: client.list_billing_groups(),
    "braket": lambda client: client.search_devices(),
    "budgets": lambda client: client.describe_budgets(AccountId="123456789012"), # Requires an Account ID
    "ce": lambda client: client.get_dimension_values(TimePeriod={'Start': '2023-01-01', 'End': '2023-01-02'}, Dimension='SERVICE', MaxResults=1), # Requires time/dimension
    "chatbot": lambda client: client.list_slack_channels(),
    "chime": lambda client: client.list_accounts(MaxResults=1),
    "chime-sdk-identity": lambda client: client.list_app_instances(),
    "chime-sdk-media-pipelines": lambda client: client.list_media_pipelines(),
    "chime-sdk-meetings": lambda client: client.list_meetings(),
    "chime-sdk-messaging": lambda client: client.list_app_instances(),
    "chime-sdk-voice": lambda client: client.list_voice_connectors(),
    "cleanrooms": lambda client: client.list_collaboration_configs(),
    "cleanroomsml": lambda client: client.list_training_datasets(),
    "cloud9": lambda client: client.list_environments(),
    "cloudcontrol": lambda client: client.list_resources(TypeName='AWS::EC2::Instance', MaxResults=1),
    "clouddirectory": lambda client: client.list_directories(MaxResults=1),
    "cloudformation": lambda client: client.list_stacks(),
    "cloudfront": lambda client: client.list_distributions(),
    "cloudfront-keyvaluestore": lambda client: client.list_key_value_stores(),
    "cloudhsm": lambda client: client.list_hsm_client_certificates(),
    "cloudhsmv2": lambda client: client.describe_clusters(),
    "cloudsearch": lambda client: client.describe_domains(),
    "cloudsearchdomain": lambda client: client.search(query='test', size=0), # A search with size 0 is minimal
    "cloudtrail": lambda client: client.list_trails(),
    "cloudtrail-data": lambda client: client.list_channels(),
    "cloudwatch": lambda client: client.describe_alarms(MaxRecords=1),
    "codeartifact": lambda client: client.list_domains(),
    "codebuild": lambda client: client.list_projects(),
    "codecatalyst": lambda client: client.list_spaces(),
    "codecommit": lambda client: client.list_repositories(),
    "codedeploy": lambda client: client.list_applications(),
    "codeguru-reviewer": lambda client: client.list_code_reviews(MaxResults=1),
    "codeguruprofiler": lambda client: client.list_profiling_groups(),
    "codepipeline": lambda client: client.list_pipelines(),
    "codestar": lambda client: client.list_projects(),
    "codestar-connections": lambda client: client.list_connections(),
    "codestar-notifications": lambda client: client.list_notification_rules(MaxResults=1),
    "cognito-identity": lambda client: client.list_identity_pools(MaxResults=1),
    "cognito-idp": lambda client: client.list_user_pools(MaxResults=1),
    "cognito-sync": lambda client: client.list_identity_pools(MaxResults=1),
    "comprehend": lambda client: client.list_sentiment_detection_jobs(MaxResults=1),
    "comprehendmedical": lambda client: client.list_icd10_cm_inference_jobs(MaxResults=1),
    "compute-optimizer": lambda client: client.get_ecs_service_recommendations(MaxResults=1),
    "config": lambda client: client.describe_configuration_recorders(),
    "connect": lambda client: client.list_instances(),
    "connectcases": lambda client: client.list_domains(),
    "connectcontactlens": lambda client: client.list_realtime_contact_analysis_configs(MaxResults=1),
    "connectparticipant": lambda client: client.get_transcript(ConnectionId="a"), # Requires a connection ID
    "controltower": lambda client: client.list_enabled_controls(),
    "cost-optimization-hub": lambda client: client.list_preferences(),
    "cur": lambda client: client.describe_report_definitions(),
    "customer-profiles": lambda client: client.list_domains(),
    "databrew": lambda client: client.list_projects(),
    "dataexchange": lambda client: client.list_data_sets(),
    "datapipeline": lambda client: client.list_pipelines(MaxResults=1),
    "datasync": lambda client: client.list_agents(),
    "datazone": lambda client: client.list_domains(),
    "dax": lambda client: client.describe_clusters(),
    "detective": lambda client: client.list_graphs(),
    "devicefarm": lambda client: client.list_projects(),
    "devops-guru": lambda client: client.list_notification_filters(),
    "directconnect": lambda client: client.describe_connections(),
    "discovery": lambda client: client.describe_agents(),
    "dlm": lambda client: client.get_lifecycle_policies(),
    "dms": lambda client: client.describe_replication_tasks(MaxRecords=1),
    "docdb": lambda client: client.describe_db_instances(MaxRecords=1),
    "docdb-elastic": lambda client: client.list_cluster_snapshots(),
    "drs": lambda client: client.describe_job_log_items(),
    "ds": lambda client: client.describe_directories(),
    "dynamodb": lambda client: client.list_tables(Limit=1),
    "dynamodbstreams": lambda client: client.list_streams(Limit=1),
    "ebs": lambda client: client.list_snapshots(MaxResults=1),
    "ec2": lambda client: client.describe_regions(),
    "ec2-instance-connect": lambda client: client.send_ssh_public_key(InstanceId="i-0", InstanceOSUser="u", SSHPublicKey="p", AvailabilityZone="z"), # Requires placeholders
    "ecr": lambda client: client.describe_repositories(maxResults=1),
    "ecr-public": lambda client: client.describe_repositories(maxResults=1),
    "ecs": lambda client: client.list_clusters(maxResults=1),
    "efs": lambda client: client.describe_file_systems(MaxItems=1),
    "eks": lambda client: client.list_clusters(),
    "eks-auth": lambda client: client.get_token(),
    "elastic-inference": lambda client: client.describe_accelerator_types(),
    "elasticache": lambda client: client.describe_cache_clusters(MaxRecords=1),
    "elasticbeanstalk": lambda client: client.describe_applications(MaxRecords=1),
    "elastictranscoder": lambda client: client.list_pipelines(),
    "elb": lambda client: client.describe_load_balancers(),
    "elbv2": lambda client: client.describe_load_balancers(),
    "emr": lambda client: client.list_clusters(MaxResults=1),
    "emr-containers": lambda client: client.list_virtual_clusters(),
    "emr-serverless": lambda client: client.list_applications(),
    "entityresolution": lambda client: client.list_matching_jobs(),
    "es": lambda client: client.list_domain_names(),
    "events": lambda client: client.list_rules(),
    "evidently": lambda client: client.list_projects(),
    "finspace": lambda client: client.list_environments(),
    "finspace-data": lambda client: client.list_data_views(),
    "firehose": lambda client: client.list_delivery_streams(Limit=1),
    "fis": lambda client: client.list_experiments(),
    "fms": lambda client: client.list_policies(MaxResults=1),
    "forecast": lambda client: client.list_datasets(),
    "forecastquery": lambda client: client.query_forecast(ForecastArn="a", StartDate="2023-01-01", EndDate="2023-01-02", Filters={}), # Requires placeholders
    "frauddetector": lambda client: client.get_models(maxResults=1),
    "fsx": lambda client: client.describe_file_systems(MaxResults=1),
    "gamelift": lambda client: client.list_fleets(),
    "gamesparks": lambda client: client.list_games(),
    "glacier": lambda client: client.list_vaults(accountId="-"), # Use '-' for current account
    "globalaccelerator": lambda client: client.list_accelerators(MaxResults=1),
    "glue": lambda client: client.get_databases(MaxResults=1),
    "grafana": lambda client: client.list_workspaces(),
    "greengrass": lambda client: client.list_cores(),
    "greengrassv2": lambda client: client.list_components(),
    "groundstation": lambda client: client.list_missions_profiles(),
    "guardduty": lambda client: client.list_detectors(),
    "health": lambda client: client.describe_event_types(MaxResults=1),
    "healthlake": lambda client: client.list_fhir_datastores(MaxResults=1),
    "honeycode": lambda client: client.list_tables(workbookId="a"), # Requires a workbook ID
    "iam": lambda client: client.list_users(MaxItems=1),
    "identitystore": lambda client: client.list_groups(IdentityStoreId="a"), # Requires an IdentityStoreId
    "imagebuilder": lambda client: client.list_component_build_versions(componentBuildVersionArn="a"), # Requires a placeholder ARN
    "importexport": lambda client: client.list_jobs(MaxJobs=1),
    "inspector": lambda client: client.list_assessment_runs(maxResults=1),
    "inspector2": lambda client: client.list_coverage_statistics(),
    "internetmonitor": lambda client: client.list_monitors(),
    "iot": lambda client: client.list_things(maxResults=1),
    "iot-data": lambda client: client.list_named_shadows_for_thing(thingName="a"), # Requires a thing name
    "iot-jobs-data": lambda client: client.describe_job_execution(jobId="a", thingName="t"), # Requires placeholders
    "iot-roborunner": lambda client: client.list_sites(maxResults=1),
    "iot1click-devices": lambda client: client.list_devices(),
    "iot1click-projects": lambda client: client.list_projects(),
    "iotanalytics": lambda client: client.list_channels(maxResults=1),
    "iotdeviceadvisor": lambda client: client.list_suite_definitions(maxResults=1),
    "iotevents": lambda client: client.list_inputs(maxResults=1),
    "iotevents-data": lambda client: client.list_alarms(maxResults=1),
    "iotfleethub": lambda client: client.list_applications(),
    "iotfleetwise": lambda client: client.list_campaigns(maxResults=1),
    "iotsecuretunneling": lambda client: client.list_tunnels(maxResults=1),
    "iotsitewise": lambda client: client.list_assets(maxResults=1),
    "iotthingsgraph": lambda client: client.get_system_instance(id="a"), # Requires a placeholder ID
    "iottwinmaker": lambda client: client.list_workspaces(maxResults=1),
    "iotwireless": lambda client: client.list_wireless_devices(MaxResults=1),
    "ivs": lambda client: client.list_channels(),
    "ivs-realtime": lambda client: client.list_stages(),
    "ivschat": lambda client: client.list_rooms(),
    "kafka": lambda client: client.list_clusters_v2(),
    "kafkaconnect": lambda client: client.list_connectors(),
    "kendra": lambda client: client.list_indices(),
    "kendra-ranking": lambda client: client.list_rescore_execution_plans(),
    "keyspaces": lambda client: client.list_tables(keyspaceName="a"), # Requires a keyspace name
    "kinesis": lambda client: client.list_streams(Limit=1),
    "kinesis-video-archived-media": lambda client: client.list_fragments(StreamName="a", FragmentSelector={ "FragmentSelectorType": "PRODUCER_TIMESTAMP", "TimestampRange": { "StartTimestamp": 1, "EndTimestamp": 2 } }), # Requires placeholders
    "kinesis-video-media": lambda client: client.get_media(StreamName="a", StartSelector={"StartSelectorType": "FRAGMENT_NUMBER"}), # Requires placeholders
    "kinesis-video-signaling": lambda client: client.get_ice_server_config(ChannelARN="a"), # Requires a placeholder ARN
    "kinesisanalytics": lambda client: client.list_applications(Limit=1),
    "kinesisanalyticsv2": lambda client: client.list_applications(Limit=1),
    "kinesisvideo": lambda client: client.list_streams(),
    "kms": lambda client: client.list_keys(Limit=1),
    "lakeformation": lambda client: client.get_data_lake_settings(),
    "lambda": lambda client: client.list_functions(MaxItems=1),
    "launch-wizard": lambda client: client.list_workloads(),
    "lex-models": lambda client: client.get_bot_aliases(botName="a"), # Requires a bot name
    "lex-runtime": lambda client: client.get_session(botAlias="a", botName="b", userId="u"), # Requires placeholders
    "lexv2-models": lambda client: client.list_bots(),
    "lexv2-runtime": lambda client: client.get_session(botId="a", botAliasId="b", localeId="c", sessionId="d"), # Requires placeholders
    "license-manager": lambda client: client.list_licenses(MaxResults=1),
    "license-manager-linux-subscriptions": lambda client: client.get_service_settings(),
    "license-manager-user-subscriptions": lambda client: client.list_identity_providers(),
    "lightsail": lambda client: client.get_regions(),
    "location": lambda client: client.list_maps(MaxResults=1),
    "logs": lambda client: client.describe_log_groups(limit=1),
    "lookoutequipment": lambda client: client.list_data_ingestion_jobs(MaxResults=1),
    "lookoutmetrics": lambda client: client.list_anomalous_detector_operations(),
    "lookoutvision": lambda client: client.list_projects(),
    "m2": lambda client: client.list_applications(),
    "machinelearning": lambda client: client.describe_ml_models(limit=1),
    "macie": lambda client: client.list_s3_resources(maxResults=1),
    "macie2": lambda client: client.list_managed_resources(),
    "managedblockchain": lambda client: client.list_networks(),
    "managedblockchain-query": lambda client: client.list_tokens(network="a", ownerFilter={"address": "b"}), # Requires placeholders
    "marketplace-catalog": lambda client: client.list_entities(catalog="AWSMarketplace"), # Requires catalog name
    "marketplace-entitlement": lambda client: client.get_entitlements(ProductCode="a"), # Requires a product code
    "marketplacecommerceanalytics": lambda client: client.generate_data_set(dataSetType="customer_analytics", dataSetPublicationDate="2023-01-01", roleNameArn="a", destinationS3BucketName="b"), # Requires placeholders
    "mediaconnect": lambda client: client.list_flows(),
    "mediaconvert": lambda client: client.describe_endpoints(),
    "medialive": lambda client: client.list_channels(),
    "mediapackage": lambda client: client.list_channels(),
    "mediapackage-v2": lambda client: client.list_channel_groups(),
    "mediapackage-vod": lambda client: client.list_assets(),
    "mediapackagev2": lambda client: client.list_channel_groups(),
    "mediastore": lambda client: client.list_containers(),
    "mediastore-data": lambda client: client.list_items(Path="/"),
    "mediatailor": lambda client: client.list_playback_configurations(MaxResults=1),
    "medical-imaging": lambda client: client.list_datastores(),
    "memorydb": lambda client: client.describe_clusters(MaxResults=1),
    "mgh": lambda client: client.describe_application_state(ApplicationId="a"), # Requires a placeholder ID
    "mgn": lambda client: client.list_source_servers(maxResults=1),
    "migration-hub-orchestrator": lambda client: client.list_templates(),
    "migrationhub-config": lambda client: client.describe_home_region_controls(MaxResults=1),
    "migrationhubstrategy": lambda client: client.get_service_setting(settingId="a"), # Requires a setting ID
    "mobile": lambda client: client.list_projects(),
    "mq": lambda client: client.list_brokers(maxResults=1),
    "mturk": lambda client: client.list_qualification_types(MustBeOwnedByCaller=True, MustBeRequestable=True),
    "mwaa": lambda client: client.list_environments(),
    "neptune": lambda client: client.describe_db_instances(MaxRecords=1),
    "neptune-graph": lambda client: client.list_graphs(maxResults=1),
    "neptunedata": lambda client: client.get_propertygraph_statistics(graphIdentifier="a"), # Requires a placeholder ID
    "network-firewall": lambda client: client.list_firewalls(MaxResults=1),
    "networkmanager": lambda client: client.describe_global_settings(),
    "nimble": lambda client: client.list_studios(),
    "oam": lambda client: client.list_sinks(),
    "omics": lambda client: client.list_annotation_stores(),
    "opensearch": lambda client: client.list_domain_names(),
    "opensearchserverless": lambda client: client.list_collections(),
    "opsworks": lambda client: client.describe_stacks(),
    "opsworkscm": lambda client: client.describe_servers(MaxResults=1),
    "organizations": lambda client: client.list_roots(),
    "osis": lambda client: client.list_pipelines(),
    "outposts": lambda client: client.list_outposts(MaxResults=1),
    "panorama": lambda client: client.list_packages(),
    "personalize": lambda client: client.list_solutions(),
    "personalize-events": lambda client: client.put_events(trackingId="a", userId="u", sessionId="s", eventList=[]), # Requires placeholders, but with an empty list
    "personalize-runtime": lambda client: client.get_recommendations(campaignArn="a"), # Requires a placeholder ARN
    "pi": lambda client: client.describe_dimension_keys(ServiceType="RDS", Identifier="i", StartTime=1, EndTime=2, Metric="m"), # Requires placeholders
    "pinpoint": lambda client: client.get_apps(PageSize="1"),
    "pinpoint-email": lambda client: client.get_account(),
    "pinpoint-sms-voice": lambda client: client.get_configuration_sets(),
    "pinpoint-sms-voice-v2": lambda client: client.describe_account_limits(),
    "pipes": lambda client: client.list_pipes(),
    "polly": lambda client: client.describe_voices(),
    "pricing": lambda client: client.describe_services(MaxResults=1),
    "privatelink": lambda client: client.get_vpc_endpoint_service_config(ServiceId="a"), # Requires a placeholder ID
    "proton": lambda client: client.list_services(),
    "qbusiness": lambda client: client.list_applications(),
    "qldb": lambda client: client.list_ledgers(MaxResults=1),
    "qldb-session": lambda client: client.send_command(StartSession={}), # Minimal command
    "quicksight": lambda client: client.list_users(AwsAccountId="123456789012", Namespace="default"), # Requires placeholders
    "ram": lambda client: client.get_resource_share_associations(associationType="PRINCIPAL", maxResults=1),
    "rbin": lambda client: client.list_rules(MaxResults=1),
    "rds": lambda client: client.describe_db_instances(MaxRecords=1),
    "rds-data": lambda client: client.batch_execute_statement(resourceArn="a", secretArn="b", database="d", sql="SELECT 1"), # Requires placeholders, minimal SQL
    "redshift": lambda client: client.describe_clusters(MaxRecords=1),
    "redshift-data": lambda client: client.list_statements(MaxResults=1),
    "redshift-serverless": lambda client: client.list_workgroups(),
    "rekognition": lambda client: client.describe_collection(CollectionId="a"), # Requires a collection ID
    "repostspace": lambda client: client.list_spaces(),
    "resiliencehub": lambda client: client.list_app_assessments(MaxResults=1),
    "resource-explorer-2": lambda client: client.list_indexes(MaxResults=1),
    "resource-groups": lambda client: client.list_groups(MaxResults=1),
    "resourcegroupstaggingapi": lambda client: client.get_resources(ResourcesPerPage=1),
    "robomaker": lambda client: client.list_deployment_jobs(maxResults=1),
    "rolesanywhere": lambda client: client.list_trust_anchors(maxResults=1),
    "route53": lambda client: client.list_hosted_zones(MaxItems='1'),
    "route53-recovery-cluster": lambda client: client.list_routing_controls(ControlPanelArn="a"), # Requires a placeholder ARN
    "route53-recovery-control": lambda client: client.list_control_panels(MaxResults=1),
    "route53-recovery-readiness": lambda client: client.list_resourcesets(MaxResults=1),
    "route53domains": lambda client: client.list_domains(MaxItems=1),
    "route53profiles": lambda client: client.list_profile_associations(MaxResults=1),
    "route53resolver": lambda client: client.list_resolver_endpoints(MaxResults=1),
    "rum": lambda client: client.list_app_monitors(),
    "s3": lambda client: client.list_buckets(),
    "s3control": lambda client: client.list_jobs(AccountId="123456789012", MaxResults=1), # Requires Account ID
    "s3outposts": lambda client: client.list_endpoints(MaxResults=1),
    "sagemaker": lambda client: client.list_training_jobs(MaxResults=1),
    "sagemaker-a2i-runtime": lambda client: client.list_human_loops(HumanLoopNamePrefix="a", FlowDefinitionArn="b"), # Requires placeholders
    "sagemaker-edge": lambda client: client.get_device_registration(DeviceName="a", DeviceFleetName="b"), # Requires placeholders
    "sagemaker-featurestore-runtime": lambda client: client.get_record(FeatureGroupName="a", RecordIdentifierValueAsString="b"), # Requires placeholders
    "sagemaker-metrics": lambda client: client.batch_put_metrics(TrialComponentName="a", MetricDataList=[]), # Requires placeholders
    "sagemaker-runtime": lambda client: client.invoke_endpoint(EndpointName="a", ContentType="t", Body=b"b"), # Requires placeholders
    "savingsplans": lambda client: client.describe_savings_plans(),
    "scheduler": lambda client: client.list_schedules(MaxResults=1),
    "schemas": lambda client: client.list_registries(MaxResults=1),
    "sdb": lambda client: client.list_domains(MaxNumberOfDomains=1),
    "secretsmanager": lambda client: client.list_secrets(MaxResults=1),
    "securityhub": lambda client: client.get_enabled_standards(MaxResults=1),
    "securitylake": lambda client: client.list_data_lakes(),
    "serverlessrepo": lambda client: client.list_applications(MaxItems=1),
    "service-quotas": lambda client: client.list_services(MaxResults=1),
    "servicecatalog": lambda client: client.describe_product_view(ProductViewId="a"), # Requires a product view ID
    "servicecatalog-appregistry": lambda client: client.list_applications(),
    "servicediscovery": lambda client: client.list_services(MaxResults=1),
    "ses": lambda client: client.get_send_quota(),
    "sesv2": lambda client: client.get_account(),
    "shield": lambda client: client.list_protection_groups(MaxResults=1),
    "signer": lambda client: client.list_signing_jobs(maxResults=1),
    "simspaceweaver": lambda client: client.list_simulations(),
    "sms": lambda client: client.get_servers(maxResults=1),
    "sms-voice": lambda client: client.get_configuration_sets(),
    "snowball": lambda client: client.list_compatible_images(),
    "sns": lambda client: client.list_topics(),
    "sqs": lambda client: client.list_queues(MaxResults=1),
    "ssm": lambda client: client.get_connection_status(Target="a"), # Requires a target ID
    "ssm-contacts": lambda client: client.list_contacts(MaxResults=1),
    "ssm-incidents": lambda client: client.list_response_plans(maxResults=1),
    "sso": lambda client: client.list_instances(),
    "sso-admin": lambda client: client.list_instances(),
    "sso-oidc": lambda client: client.create_token(clientId="a", clientSecret="b", grantType="c", deviceCode="d", code="e", refreshToken="f", redirectUri="g", scope=["s"]), # Requires many placeholders
    "stepfunctions": lambda client: client.list_state_machines(maxResults=1),
    "storagegateway": lambda client: client.list_gateways(Limit=1),
    "sts": lambda client: client.get_caller_identity(),
    "supplychain": lambda client: client.list_data_integration_sync_configurations(),
    "support": lambda client: client.describe_services(),
    "support-app": lambda client: client.list_slack_channels(MaxResults=1),
    "swf": lambda client: client.list_domains(registrationStatus="REGISTERED", maximumPageSize=1),
    "synecdoche": lambda client: client.list_tags_for_resource(ResourceArn="a"), # Requires a placeholder ARN
    "tagging": lambda client: client.get_resources(ResourcesPerPage=1),
    "textract": lambda client: client.list_adapters(),
    "timestream-query": lambda client: client.list_scheduled_queries(MaxResults=1),
    "timestream-write": lambda client: client.list_databases(MaxResults=1),
    "tnb": lambda client: client.list_sol_function_packages(),
    "transcribe": lambda client: client.list_languages(MaxResults=1),
    "transfer": lambda client: client.list_servers(MaxResults=1),
    "translate": lambda client: client.list_terminologies(MaxResults=1),
    "trustedadvisor": lambda client: client.list_organization_recommendation_accounts(MaxResults=1),
    "verifiedpermissions": lambda client: client.list_policy_stores(),
    "voice-id": lambda client: client.list_domains(MaxResults=1),
    "vpc-lattice": lambda client: client.list_service_networks(),
    "waf": lambda client: client.list_web_acls(),
    "waf-regional": lambda client: client.list_web_acls(),
    "wafv2": lambda client: client.list_web_acls(Scope="REGIONAL", Limit=1),
    "wellarchitected": lambda client: client.list_workloads(MaxResults=1),
    "wisdom": lambda client: client.list_assistants(),
    "workdocs": lambda client: client.describe_users(OrganizationId="a", Limit=1), # Requires a placeholder Organization ID
    "worklink": lambda client: client.list_fleets(MaxResults=1),
    "workmail": lambda client: client.list_organizations(MaxResults=1),
    "workmailmessageflow": lambda client: client.get_raw_message_content(messageId="a"), # Requires a message ID
    "workspaces": lambda client: client.describe_workspaces(Limit=1),
    "workspaces-thin-client": lambda client: client.list_devices(),
    "workspaces-web": lambda client: client.list_portals(),
    "xray": lambda client: client.get_service_graph(StartTime=1, EndTime=2), # Requires placeholders
}
